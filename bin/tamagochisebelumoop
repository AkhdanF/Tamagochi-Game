tamagochisebelumoop


import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;

public class TamagotchiGame extends JFrame {
    private final int SCREEN_WIDTH = 400;
    private final int SCREEN_HEIGHT = 600;
    private final int PIXEL_SCALE = 3;
    private final Color LCD_GREEN = new Color(203, 203, 167);
    private final Color LCD_DARK = new Color(205, 220, 255);
    private final Color STATUS_BAR_COLOR = new Color(100, 150, 200);
    private final Color LCD_OUTLINE_COLOR = new Color(66, 64, 42);
    private final Color STATUS_TEXT_COLOR = new Color(50, 50, 50);
    private Pet currentPet;
    private GameScreen gameScreen;
    private Timer gameStateTimer;
    private Timer animationTimer;
    private int animationFrame = 0;
    private boolean isEating = false;
    private boolean isPlaying = false;
    private BufferedImage catIdle1;
    private BufferedImage catIdle2;
    private BufferedImage catPlay1;
    private BufferedImage catPlay2;
    private BufferedImage dogIdle1;
    private BufferedImage dogIdle2;
    private BufferedImage bunnyIdle1;
    private BufferedImage bunnyIdle2;
    private BufferedImage bunnyPlay1;
    private BufferedImage bunnyPlay2;
    private BufferedImage feedButtonImage;
    private BufferedImage playButtonImage;
    private BufferedImage statsButtonImage;
    private BufferedImage menuImage;
    private BufferedImage settingButtonImage;

    // Inner class untuk layar game
    class GameScreen extends JPanel {
        private BufferedImage screenBuffer;
        private Graphics2D g2d;

        public GameScreen() {
            setPreferredSize(new Dimension(SCREEN_WIDTH, SCREEN_HEIGHT));
            screenBuffer = new BufferedImage(SCREEN_WIDTH, SCREEN_HEIGHT, BufferedImage.TYPE_INT_RGB);
            g2d = screenBuffer.createGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);
        }

        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);
            // Draw device frame
            g2d.setColor(LCD_DARK);
            g2d.fillRoundRect(10, 10, SCREEN_WIDTH-20, SCREEN_HEIGHT-20, 20, 20);
            
            // Draw LCD screen area
            g2d.setColor(LCD_GREEN);
            g2d.fillRect(40, 60, SCREEN_WIDTH-80, SCREEN_HEIGHT-200);

            // Draw LCD screen outline with thicker stroke
            g2d.setColor(LCD_OUTLINE_COLOR);
            g2d.setStroke(new BasicStroke(3)); // Set the stroke thickness to 3
            g2d.drawRect(40, 60, SCREEN_WIDTH-80, SCREEN_HEIGHT-200);
            g2d.setStroke(new BasicStroke(1)); // Reset stroke to default

            // Draw settings icon in the top-right corner
            int settingX = SCREEN_WIDTH - settingButtonImage.getWidth() / 4 - 40;
            int settingY = 35;
            g2d.drawImage(settingButtonImage, settingX, settingY, settingButtonImage.getWidth() / 4, settingButtonImage.getHeight() / 4, null);

            // Draw pet name in the top-left corner
            if (currentPet != null) {
                g2d.setColor(STATUS_TEXT_COLOR);
                g2d.setFont(new Font("Courier New", Font.BOLD, 16));
                g2d.drawString("Pet Name: " + currentPet.name, 50, 50);
            }

            if (currentPet != null) {
                drawPet();
                drawStatus();
                drawButtons();
            } else {
                drawWelcomeScreen();
            }

            // Draw final image
            g.drawImage(screenBuffer, 0, 0, null);
        }

        private void drawPet() {
            g2d.setColor(LCD_DARK);
            int centerX = SCREEN_WIDTH / 2;
            int centerY = SCREEN_HEIGHT / 2 - 50;

            // Draw basic pet shape based on type and animation frame
            if (currentPet.type.equals("Cat")) {
                drawCat(centerX, centerY);
            } else if (currentPet.type.equals("Dog")) {
                drawDog(centerX, centerY);
            } else {
                drawBunny(centerX, centerY);
            }
        }

        private void drawCat(int x, int y) {
            BufferedImage catImage;
            if (isPlaying) {
                catImage = (animationFrame % 2 == 0) ? catPlay1 : catPlay2;
            } else {
                catImage = (animationFrame % 2 == 0) ? catIdle1 : catIdle2;
            }
            int scaledWidth = catImage.getWidth() / 5;
            int scaledHeight = catImage.getHeight() / 5;
            int imageX = x - scaledWidth / 2;
            int imageY = y - scaledHeight / 2;
            g2d.drawImage(catImage, imageX, imageY, scaledWidth, scaledHeight, null);
        }

        private void drawDog(int x, int y) {
            BufferedImage dogImage = (animationFrame % 2 == 0) ? dogIdle1 : dogIdle2;
            int scaledWidth = dogImage.getWidth() / 4;
            int scaledHeight = dogImage.getHeight() / 4;
            int imageX = x - scaledWidth / 2;
            int imageY = y - scaledHeight / 2;
            g2d.drawImage(dogImage, imageX, imageY, scaledWidth, scaledHeight, null);
        }

        private void drawBunny(int x, int y) {
            BufferedImage bunnyImage;
            if (isPlaying) {
                bunnyImage = (animationFrame % 2 == 0) ? bunnyPlay1 : bunnyPlay2;
            } else {
                bunnyImage = (animationFrame % 2 == 0) ? bunnyIdle1 : bunnyIdle2;
            }
            int scaledWidth = bunnyImage.getWidth() / 4;
            int scaledHeight = bunnyImage.getHeight() / 4;
            int imageX = x - scaledWidth / 2;
            int imageY = y - scaledHeight / 2;
            g2d.drawImage(bunnyImage, imageX, imageY, scaledWidth, scaledHeight, null);
        }

        private void drawStatus() {
            g2d.setColor(LCD_DARK);
            g2d.setFont(new Font("Courier New", Font.BOLD, 12));
            
            // Draw status icons and bars
            drawStatusBar("Health", currentPet.health, 50, SCREEN_HEIGHT - 190);
            drawStatusBar("Happy", currentPet.happiness, 50, SCREEN_HEIGHT - 170);
            drawStatusBar("Hunger", currentPet.hunger, 50, SCREEN_HEIGHT - 150);
        }

        private void drawStatusBar(String label, int value, int x, int y) {
            g2d.setColor(STATUS_TEXT_COLOR);
            g2d.drawString(label, x, y);
            g2d.setColor(LCD_DARK);
            g2d.drawRect(x+60, y-10, 100, 10);
            g2d.setColor(STATUS_BAR_COLOR);
            g2d.fillRect(x+60, y-10, value, 10);
        }

        private void drawButtons() {
            // Draw virtual buttons using images
            int buttonY = SCREEN_HEIGHT - 80;
            int buttonWidth = feedButtonImage.getWidth() / 4;  // Adjust the divisor to scale as needed
            int buttonHeight = feedButtonImage.getHeight() / 4; // Adjust the divisor to scale as needed

            g2d.drawImage(feedButtonImage, 50, buttonY, buttonWidth, buttonHeight, null);
            g2d.drawImage(playButtonImage, 170, buttonY, buttonWidth, buttonHeight, null);
            g2d.drawImage(statsButtonImage, 290, buttonY, buttonWidth, buttonHeight, null);
        }

        private void drawWelcomeScreen() {
            int lcdWidth = SCREEN_WIDTH - 80;  // Width of the LCD screen area
            int lcdHeight = SCREEN_HEIGHT - 200; // Height of the LCD screen area
            int imageX = 40;  // X position of the LCD screen area
            int imageY = 60;  // Y position of the LCD screen area

            g2d.drawImage(menuImage, imageX, imageY, lcdWidth, lcdHeight, null);
        }
    }

    // Pet class
    static class Pet {
        String name;
        String type;
        int health = 100;
        int happiness = 50;
        int hunger = 50;
        boolean stressed = false;
        int age = 0;

        public Pet(String name, String type) {
            this.name = name;
            this.type = type;
        }

        public void updateState() {
            hunger = Math.min(hunger + 1, 100);
            if (hunger > 80) {
                health = Math.max(health - 2, 0); // Decrease health faster if very hungry
            } else if (hunger < 20) {
                health = Math.min(health + 1, 100); // Recover health if well-fed
            }
            happiness = Math.max(happiness - 1, 0);
            stressed = happiness < 20;
        }

        public void feed() {
            hunger = Math.max(hunger - 20, 0);
            health = Math.min(health + 5, 100);
        }

        public void play() {
            happiness = Math.min(happiness + 20, 100);
        }
    }

    public TamagotchiGame() {
        setTitle("Tamagotchi");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setResizable(false);

        gameScreen = new GameScreen();
        add(gameScreen);

        // Timer for game state updates (slower)
        gameStateTimer = new Timer(2000, e -> { // Slower interval for game state updates
            if (currentPet != null) {
                currentPet.updateState();
            }
        });
        gameStateTimer.start();

        // Timer for animations (faster)
        animationTimer = new Timer(500, e -> { // Keep the animation speed the same
            if (currentPet != null) {
                animationFrame++;
                if (animationFrame > 10) {
                    isEating = false;
                    isPlaying = false;
                }
            }
            gameScreen.repaint();
        });
        animationTimer.start();

        // Key listeners
        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_SPACE && currentPet == null) {
                    String[] options = {"Cat", "Dog", "Bunny"};
                    String type = (String) JOptionPane.showInputDialog(
                        TamagotchiGame.this,
                        "Choose your pet:",
                        "New Pet",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        options,
                        options[0]);
                    
                    if (type != null) {
                        String name = JOptionPane.showInputDialog("Name your pet:");
                        if (name != null && !name.trim().isEmpty()) {
                            currentPet = new Pet(name, type);
                        }
                    }
                }
            }
        });

        // Mouse listener for buttons and settings
        gameScreen.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (currentPet != null) {
                    int x = e.getX();
                    int y = e.getY();
                    
                    // Check button clicks
                    if (y > SCREEN_HEIGHT-80 && y < SCREEN_HEIGHT-50) {
                        if (x > 50 && x < 110) { // Feed button
                            currentPet.feed();
                            isEating = true;
                            animationFrame = 0;
                        } else if (x > 170 && x < 230) { // Play button
                            currentPet.play();
                            isPlaying = true;
                            animationFrame = 0;
                        } else if (x > 290 && x < 350) { // Status button
                            showStatus();
                        }
                    }

                    // Check settings icon click
                    int settingX = SCREEN_WIDTH - settingButtonImage.getWidth() / 4 - 40;
                    int settingY = 35;
                    if (x > settingX && x < settingX + settingButtonImage.getWidth() / 4 && y > settingY && y < settingY + settingButtonImage.getHeight() / 4) {
                        showSettingsMenu();
                    }
                }
            }
        });

        try {
            catIdle1 = ImageIO.read(getClass().getResource("/assets/Car_idle1.png"));
            catIdle2 = ImageIO.read(getClass().getResource("/assets/Car_idle2.png"));
            catPlay1 = ImageIO.read(getClass().getResource("/assets/Car_play1.png"));
            catPlay2 = ImageIO.read(getClass().getResource("/assets/Car_play2.png"));
            dogIdle1 = ImageIO.read(getClass().getResource("/assets/Dog_idle1.png"));
            dogIdle2 = ImageIO.read(getClass().getResource("/assets/Dog_idle2.png"));
            bunnyIdle1 = ImageIO.read(getClass().getResource("/assets/Bnuy_idle1.png"));
            bunnyIdle2 = ImageIO.read(getClass().getResource("/assets/Bnuy_idle2.png"));
            bunnyPlay1 = ImageIO.read(getClass().getResource("/assets/Bnuy_play1.png"));
            bunnyPlay2 = ImageIO.read(getClass().getResource("/assets/Bnuy_play2.png"));
            feedButtonImage = ImageIO.read(getClass().getResource("/assets/Feed_button.png"));
            playButtonImage = ImageIO.read(getClass().getResource("/assets/Play_button.png"));
            statsButtonImage = ImageIO.read(getClass().getResource("/assets/Stats_button.png"));
            menuImage = ImageIO.read(getClass().getResource("/assets/menu.png"));
            settingButtonImage = ImageIO.read(getClass().getResource("/assets/Setting_button.png"));
        } catch (IOException e) {
            e.printStackTrace();
        }

        pack();
        setLocationRelativeTo(null);
        setFocusable(true);
    }

    private void showStatus() {
        if (currentPet != null) {
            String status = String.format("""
                %s the %s
                Age: %d
                Health: %d%%
                Happiness: %d%%
                Hunger: %d%%
                %s""",
                currentPet.name, currentPet.type, currentPet.age,
                currentPet.health, currentPet.happiness, currentPet.hunger,
                currentPet.stressed ? "Status: Stressed" : "Status: Normal"
            );
            JOptionPane.showMessageDialog(this, status, "Pet Status", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void showSettingsMenu() {
        String[] options = {"Change Name", "Restart Game", "Exit Game"};
        int choice = JOptionPane.showOptionDialog(this, "Settings", "Choose an option", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

        switch (choice) {
            case 0: // Change Name
                if (currentPet != null) {
                    String newName = JOptionPane.showInputDialog("Enter new name for your pet:");
                    if (newName != null && !newName.trim().isEmpty()) {
                        currentPet.name = newName;
                    }
                }
                break;
            case 1: // Restart Game
                currentPet = null;
                break;
            case 2: // Exit Game
                System.exit(0);
                break;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            try {
                UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            } catch (Exception e) {
                e.printStackTrace();
            }
            TamagotchiGame game = new TamagotchiGame();
            game.setVisible(true);
        });
    }
}
